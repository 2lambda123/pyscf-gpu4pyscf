# Copyright 2024 The GPU4PySCF Authors. All Rights Reserved.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import time

import pyscf
from pyscf import lib
from pyscf.geomopt.geometric_solver import optimize

from gpu4pyscf.dft import rks

lib.num_threads(16)

# Ritonavir
# coords in angstrom, generated by 'geometric_relax.py'
atom = '''
C           	-3.83381324	3.44306530	-4.39315159
C           	-3.62204754	3.54130474	-2.87951838
C           	-2.1326220	3.65680189	-2.50885763
C           	-4.25261292	2.39558801	-2.12302765
N           	-4.10479116	2.19173974	-0.83635716
C           	-4.75469384	1.05863997	-0.40740256
C           	-5.43362938	0.36728375	-1.39356217
S           	-5.24851420	1.1686302	-2.91611566
C           	-4.61326260	0.66010940	1.04535275
N           	-3.25089024	0.82982194	1.5309740
C           	-2.95587618	2.03899866	2.28097894
C           	-2.18946156	0.14086704	0.97011504
O           	-1.01482957	0.54936810	1.08852420
N           	-2.51388114	-1.00342113	0.28299426
C           	-1.57164896	-1.86847208	-0.4351802
C           	-0.77719539	-1.13120815	-1.5418288
C           	0.10935308	-2.12185894	-2.3068330
C           	-1.70971267	-0.37739007	-2.4934403
C           	-0.65218414	-2.69353629	0.50808053
O           	-0.64728859	-3.93095576	0.46075639
N           	0.11991890	-1.94397106	1.33360223
C           	0.88343393	-2.49197211	2.45052871
C           	-0.04550560	-3.27107031	3.42530777
C           	-1.33873755	-2.54648931	3.71349590
C           	-2.55867890	-3.01293746	3.18307133
C           	-3.75910777	-2.32169092	3.41502695
C           	-3.75790093	-1.14167163	4.17484813
C           	-2.54846895	-0.66219751	4.70463900
C           	-1.35356174	-1.35876639	4.4750175
C           	2.085854	-3.3650047	2.03672074
C           	3.44221470	-2.64768282	1.81654077
C           	3.66721432	-2.06023002	0.39779342
C           	5.10089787	-1.47276119	0.26424101
C           	5.29284697	-0.69179530	-1.01254771
C           	5.20619458	0.71575504	-1.00787402
C           	5.2933910	1.45191292	-2.1993072
C           	5.46921572	0.78634874	-3.42238163
C           	5.56347373	-0.61514896	-3.44353842
C           	5.47619532	-1.34564985	-2.24853679
N           	2.6515684	-1.1082287	-0.05373235
C           	2.43124064	0.10864934	0.49812034
O           	2.82986509	0.48817018	1.60517313
O           	1.66999675	0.86863574	-0.33224740
C           	1.35843285	2.21113937	0.09321206
C           	2.07970878	3.18604604	-0.77792841
C           	3.16810117	3.98406554	-0.46679822
N           	3.68801118	4.73395826	-1.49094675
C           	3.02046754	4.52456534	-2.59907028
S           	1.6994441	3.38587140	-2.46715664
O           	3.73853919	-1.73673056	2.85469468
H           	-4.91009337	3.40181552	-4.65877978
H           	-3.39652200	4.32367171	-4.90314159
H           	-3.34266350	2.53661213	-4.8046987
H           	-4.1329743	4.46246605	-2.51495557
H           	-1.56956613	2.77272892	-2.87098950
H           	-2.00505791	3.71254929	-1.41101170
H           	-1.68466750	4.56150704	-2.96579955
H           	-6.00566372	-0.56431835	-1.30674230
H           	-4.9814756	-0.3777476	1.20380536
H           	-5.26242945	1.29977121	1.67761174
H           	-3.0790737	2.94531429	1.64908589
H           	-3.63275635	2.1088155	3.1571827
H           	-1.91105927	1.98562907	2.63236370
H           	-3.42786696	-1.41212823	0.4683932
H           	-2.19616479	-2.6424754	-0.9253052
H           	-0.12427403	-0.38847779	-1.04186754
H           	0.76267527	-2.7099029	-1.63125357
H           	-0.50194268	-2.85617887	-2.87290108
H           	0.74904763	-1.58641474	-3.03842050
H           	-2.40186419	-1.07140089	-3.0167058
H           	-2.3247473	0.36829347	-1.95603239
H           	-1.12376571	0.15925055	-3.26781793
H           	-0.07610918	-0.9244448	1.32621459
H           	1.2855536	-1.61389061	2.99677881
H           	-0.26622142	-4.26119442	2.98167758
H           	0.52133218	-3.43952066	4.36504075
H           	-2.55361280	-3.92787325	2.57044597
H           	-4.70440629	-2.71384262	3.00605454
H           	-4.69755567	-0.5982441	4.35977164
H           	-2.53688072	0.2621053	5.30268226
H           	-0.40961977	-0.97486628	4.89440476
H           	1.80422798	-3.98163740	1.1590679
H           	2.26120559	-4.07670750	2.86928415
H           	4.21364435	-3.45032163	1.88533480
H           	3.56920249	-2.91265902	-0.30566931
H           	5.28747809	-0.82833353	1.14462468
H           	5.8189206	-2.3162936	0.32732422
H           	5.05774191	1.23854249	-0.05006661
H           	5.22155829	2.54980395	-2.16710205
H           	5.53727930	1.35950295	-4.35967656
H           	5.71009338	-1.14346343	-4.39838952
H           	5.5534254	-2.4452215	-2.27338901
H           	2.2937980	-1.22113743	-1.00275881
H           	1.67635647	2.3368866	1.14637479
H           	0.25578937	2.2954913	0.042014
H           	3.61787542	4.03304965	0.53621252
H           	3.24756115	5.00449090	-3.56296153
H           	3.40960496	-0.84609697	2.5654834
'''

xc = 'PBE'
bas = 'def2-svp'
auxbasis = 'def2-svp-jkfit'
scf_tol = 1e-10
max_scf_cycles = 50
screen_tol = 1e-14
grids_level = 3
mol = pyscf.M(atom=atom, basis=bas, max_memory=32000)

mol.verbose = 1
mf_GPU = rks.RKS(mol, xc=xc, disp='d3bj').density_fit(auxbasis=auxbasis)
mf_GPU.grids.level = grids_level
mf_GPU.conv_tol = scf_tol
mf_GPU.max_cycle = max_scf_cycles
mf_GPU.screen_tol = screen_tol

gradients = []


def callback(envs):
    gradients.append(envs['gradients'])


start_time = time.time()
mol_eq = optimize(
    mf_GPU,
    maxsteps=500,
    constraints='geometric_scan.txt',  # atom index is 1-based in this file
    callback=callback)
print("Optimized coordinate:")
print(mol_eq.atom_coords())
print(time.time() - start_time)
